name: üì∏ Captura Radar Meteorol√≥gico

      # 2. Instalar herramientas nativas
      - name: üì¶ Instalar wkhtmltopdf
        run: |
          echo "üì¶ Instalando wkhtmltopdf..."
          sudo apt-get update -qq
          sudo apt-get install -y wkhtmltopdf xvfb
          echo "‚úÖ wkhtmltopdf instalado correctamente"
          
          echo "üîç Verificando instalaci√≥n..."
          wkhtmltoimage --version
          
          echo "üîß Configurando Xvfb para modo headless..."
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          sleep 2
          echo "‚úÖ Entorno configurado"       # 3. Verificar estructura de directorios
      - name: üìÅ Verificar directorios
        run: |
          echo "üóã Verificando estructura del proyecto..."
          mkdir -p captures
          echo "üìÅ Contenido de captures/:"
          ls -la captures/ || echo "Carpeta captures vac√≠a"
          
          echo "üîç Verificando archivos del proyecto:"
          find . -maxdepth 2 -type f -name "*.js" -o -name "*.json" -o -name "*.yml" | sort
          
          echo "üìä Espacio en disco disponible:"
          df -h .
          
          echo "üåç Verificando conectividad:"
          curl -I https://www.windy.com || echo "Problema de conectividad"
  # üö´ Ejecuci√≥n autom√°tica temporalmente desactivada para testing
  # schedule:
  #   - cron: '*/5 * * * *'
  
  # Permite ejecuci√≥n manual desde la interfaz de GitHub
  workflow_dispatch:
    inputs:
      cleanup_old_files:
        description: 'Limpiar archivos antiguos (mantener √∫ltimos 100)'
        required: false
        default: 'true'
        type: boolean

# Configuraci√≥n de permisos
permissions:
  contents: write
  actions: read

jobs:
  capture-radar:
    name: üå¶Ô∏è Capturar Radar de Windy.com
    runs-on: ubuntu-latest
    
    # Timeout para evitar ejecuciones colgadas
    timeout-minutes: 10
    
    steps:
      # 1. Checkout del repositorio
      - name: üì• Checkout repositorio
        uses: actions/checkout@v4
        with:
          # Traer todo el historial para commits
          fetch-depth: 0
          # Token para poder hacer push
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Configurar Node.js
      - name: üü¢ Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # No usar cache hasta que tengamos package-lock.json estable
          cache: 'npm'
          cache-dependency-path: 'package.json'

      # 3. Instalar dependencias
      - name: üì¶ Instalar dependencias
        run: |
          echo "ÔøΩ Instalando dependencias con npm install..."
          npm install
          echo "‚úÖ Dependencias instaladas correctamente"

      # 4. Verificar estructura de directorios
      - name: üìÅ Verificar directorios y dependencias
        run: |
          echo "üóã Verificando estructura del proyecto..."
          mkdir -p captures
          echo "üìÅ Contenido de captures/:"
          ls -la captures/ || echo "Carpeta captures vac√≠a"
          
          echo "üì¶ Verificando package.json:"
          cat package.json | head -20
          
          echo "üîç Verificando archivos del proyecto:"
          find . -maxdepth 2 -type f -name "*.js" -o -name "*.json" -o -name "*.yml" | sort
          
          echo "üìä Espacio en disco disponible:"
          df -h .

      # 4. Ejecutar script de captura
      - name: üì∏ Ejecutar captura de radar
        run: |
          echo "üöÄ Iniciando captura del radar meteorol√≥gico..."
          echo "üîß Verificando script de captura..."
          
          if [ ! -f "scripts/screenshot.js" ]; then
            echo "‚ùå Error: No se encuentra scripts/screenshot.js"
            exit 1
          fi
          
          echo "ÔøΩ Verificando wkhtmltoimage..."
          wkhtmltoimage --version
          
          echo "‚úÖ Script encontrado, ejecutando captura..."
          export DISPLAY=:99
          node scripts/screenshot.js
          
          echo "üì∏ Captura completada, verificando resultados..."
          ls -la captures/ || echo "No se generaron capturas"

      # 5. Verificar si hay nuevos archivos
      - name: üîç Verificar cambios
        id: verify-changes
        run: |
          echo "üîç Verificando estado del repositorio..."
          
          # Mostrar estado actual
          echo "üìÅ Estado de Git:"
          git status
          
          echo "üìà Contenido actual de captures/:"
          ls -la captures/ || echo "Carpeta captures vac√≠a"
          
          # Contar archivos en captures
          FILE_COUNT=$(find captures -name "*.png" 2>/dev/null | wc -l)
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          echo "üìä Total de capturas encontradas: $FILE_COUNT"
          
          # Verificar si hay archivos nuevos o modificados
          if git diff --quiet && git diff --staged --quiet; then
            echo "‚ÑπÔ∏è  No hay cambios para commitear"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Se detectaron cambios"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            echo "üìä Archivos modificados:"
            git status --porcelain
            
            echo "üìà √öltimas capturas:"
            ls -la captures/*.png 2>/dev/null | tail -5 || echo "No hay archivos PNG"
          fi

      # 7. Configurar Git (solo si hay cambios)
      - name: ‚öôÔ∏è Configurar Git
        if: steps.verify-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Radar Capture"
          git config --local core.autocrlf false

      # 6. Limpieza autom√°tica despu√©s de captura exitosa
      - name: üßπ Limpieza autom√°tica de capturas antiguas
        if: steps.verify-changes.outputs.has_changes == 'true'
        run: |
          cd captures
          FILE_COUNT=$(find . -name "radar_*.png" | wc -l)
          echo "üìä Archivos actuales antes de limpieza: $FILE_COUNT"
          
          if [ "$FILE_COUNT" -gt 100 ]; then
            echo "üßπ Eliminando archivos antiguos (manteniendo √∫ltimos 100)..."
            find . -name "radar_*.png" -printf '%T@ %p\n' | sort -n | head -n -100 | cut -d' ' -f2- | xargs rm -f
            NEW_COUNT=$(find . -name "radar_*.png" | wc -l)
            echo "‚úÖ Limpieza autom√°tica completada. Archivos restantes: $NEW_COUNT"
          else
            echo "‚ÑπÔ∏è  No es necesario limpiar (solo $FILE_COUNT archivos)"
          fi

      # 7. Commit y push (solo si hay cambios)
      - name: üíæ Commit y push cambios
        if: steps.verify-changes.outputs.has_changes == 'true'
        run: |
          # A√±adir todos los cambios en captures (nuevos archivos y eliminaciones)
          git add captures/
          
          # Crear commit con timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_MSG="üì∏ Captura autom√°tica del radar - $TIMESTAMP"
          
          # A√±adir informaci√≥n adicional al commit
          FINAL_COUNT=$(find captures -name "radar_*.png" | wc -l)
          COMMIT_MSG="$COMMIT_MSG (Total: $FINAL_COUNT capturas)"
          
          git commit -m "$COMMIT_MSG"
          
          echo "üöÄ Haciendo push de los cambios..."
          git push

      # 8. Limpiar archivos antiguos (manual adicional si se solicita)
      - name: üßπ Limpieza manual adicional
        if: github.event.inputs.cleanup_old_files == 'true' && github.event_name == 'workflow_dispatch'
        run: |
          echo "üßπ Iniciando limpieza de archivos antiguos..."
          
          # Mantener solo los √∫ltimos 100 archivos
          cd captures
          FILE_COUNT=$(find . -name "radar_*.png" | wc -l)
          
          if [ "$FILE_COUNT" -gt 100 ]; then
            echo "Archivos encontrados: $FILE_COUNT"
            echo "Eliminando archivos antiguos (manteniendo √∫ltimos 100)..."
            
            # Listar archivos por fecha y eliminar los m√°s antiguos
            find . -name "radar_*.png" -printf '%T@ %p\n' | sort -n | head -n -100 | cut -d' ' -f2- | xargs rm -f
            
            NEW_COUNT=$(find . -name "radar_*.png" | wc -l)
            echo "‚úÖ Limpieza completada. Archivos restantes: $NEW_COUNT"
            
            # Commit de la limpieza
            cd ..
            if ! git diff --quiet captures/; then
              git add captures/
              git commit -m "üßπ Limpieza autom√°tica - Mantenidos √∫ltimos 100 archivos"
              git push
            fi
          else
            echo "No es necesario limpiar (solo $FILE_COUNT archivos)"
          fi

      # 9. Resumen de ejecuci√≥n
      - name: üìã Resumen de ejecuci√≥n
        if: always()
        run: |
          echo "=== üìã RESUMEN DE EJECUCI√ìN ==="
          echo "‚è∞ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "üîÑ Trigger: ${{ github.event_name }}"
          
          if [ "${{ steps.verify-changes.outputs.has_changes }}" == "true" ]; then
            echo "‚úÖ Estado: Captura exitosa y cambios commiteados"
            echo "üìä Total de capturas: ${{ steps.verify-changes.outputs.file_count }}"
          else
            echo "‚ÑπÔ∏è  Estado: Ejecuci√≥n completada, sin cambios"
          fi
          
          echo "üìÅ Contenido actual de captures/:"
          ls -la captures/ | tail -5 || echo "No hay archivos en captures/"
          
          echo "üíæ Tama√±o total de la carpeta captures:"
          du -sh captures/ || echo "0B"