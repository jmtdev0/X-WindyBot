name: Captura Ultra-Rapida Hibrida

on:
  # Ejecucion automatica temporalmente desactivada para testing
  # schedule:
  #   - cron: '*/5 * * * *'
  
  # Permite ejecucion manual desde la interfaz de GitHub
  workflow_dispatch:
    inputs:
      cleanup_old_files:
        description: 'Limpiar archivos antiguos (mantener ultimos 100)'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  capture-radar-hybrid:
    name: Captura Ultra-Rapida Hibrida (Chrome + wkhtmltoimage)
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    outputs:
      file_count: ${{ steps.check.outputs.file_count }}
      has_changes: ${{ steps.check.outputs.has_changes }}

    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar herramientas hibridas de captura
        run: |
          echo "Actualizando paquetes del sistema..."
          sudo apt-get update -qq
          
          echo "Instalando Google Chrome (metodo principal)..."
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update -qq
          sudo apt-get install -y google-chrome-stable
          
          echo "Instalando wkhtmltopdf (fallback) y dependencias..."
          sudo apt-get install -y wkhtmltopdf xvfb curl
          
          echo "Verificando instalaciones..."
          google-chrome-stable --version || echo "Chrome no disponible"
          wkhtmltoimage --version || echo "wkhtmltoimage no disponible"
          
          echo "Configurando display virtual..."
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3
          echo "Entorno hibrido configurado correctamente"

      - name: Verificar directorios y conectividad
        run: |
          echo "Verificando estructura del proyecto..."
          mkdir -p captures
          ls -la captures/ || echo "Carpeta captures vacia"
          
          echo "Verificando conectividad..."
          curl -I https://www.windy.com --max-time 10 || echo "Problema de conectividad"
          
          echo "Espacio disponible:"
          df -h . | head -2

      - name: Ejecutar captura hibrida optimizada
        run: |
          echo "Iniciando captura hibrida con Chrome headless + wkhtmltoimage fallback..."
          
          if [ ! -f "scripts/capture-native.sh" ]; then
            echo "Script nativo no encontrado, usando comando directo Chrome..."
            
            TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
            FILENAME="radar_${TIMESTAMP}.png"
            FILEPATH="captures/${FILENAME}"
            
            echo "Capturando con Chrome headless (15s wait)..."
            google-chrome-stable \
              --headless \
              --no-sandbox \
              --disable-gpu \
              --disable-dev-shm-usage \
              --disable-extensions \
              --disable-plugins \
              --disable-background-timer-throttling \
              --disable-backgrounding-occluded-windows \
              --disable-renderer-backgrounding \
              --disable-features=TranslateUI \
              --disable-ipc-flooding-protection \
              --window-size=1920,1080 \
              --virtual-time-budget=15000 \
              --run-all-compositor-stages-before-draw \
              --screenshot="$FILEPATH" \
              "https://www.windy.com/?radar,39.853,-3.807,7"
              
            echo "Captura Chrome completada: $FILENAME"
          else
            echo "Usando script hibrido mejorado..."
            chmod +x scripts/capture-native.sh
            export DISPLAY=:99
            ./scripts/capture-native.sh
          fi
          
          echo "Resultados:"
          ls -la captures/*.png 2>/dev/null || echo "No hay capturas PNG"
          
          echo "Analisis de logs de debugging:"
          if [ -f "chrome_debug.log" ]; then
            echo "Chrome debug log (ultimas 10 lineas):"
            tail -10 chrome_debug.log
          fi
          
          if [ -f "wkhtmltoimage_debug.log" ]; then
            echo "wkhtmltoimage debug log (ultimas 10 lineas):"
            tail -10 wkhtmltoimage_debug.log
          fi

      - name: Verificar estado del repositorio
        id: check
        run: |
          echo "Verificando estado del repositorio..."
          
          FILE_COUNT=$(find captures -name "*.png" 2>/dev/null | wc -l)
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          echo "Total de capturas: $FILE_COUNT"
          
          if git diff --quiet && git diff --staged --quiet; then
            echo "No hay cambios para commitear"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Se detectaron cambios"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            echo "Estado de Git:"
            git status --porcelain
          fi

      - name: Limpieza automatica de archivos antiguos
        if: steps.check.outputs.has_changes == 'true'
        run: |
          cd captures
          FILE_COUNT=$(find . -name "radar_*.png" | wc -l)
          
          if [ "$FILE_COUNT" -gt 100 ]; then
            echo "Eliminando archivos antiguos (manteniendo ultimos 100)..."
            find . -name "radar_*.png" -printf '%T@ %p\n' | sort -n | head -n -100 | cut -d' ' -f2- | xargs rm -f
            NEW_COUNT=$(find . -name "radar_*.png" | wc -l)
            echo "Limpieza completada. Archivos restantes: $NEW_COUNT"
          else
            echo "No necesita limpieza (solo $FILE_COUNT archivos)"
          fi

      - name: Configurar Git y hacer commit
        if: steps.check.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Ultra Fast Hybrid"
          
          git add captures/
          
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          FINAL_COUNT=$(find captures -name "radar_*.png" | wc -l)
          git commit -m "Captura hibrida del radar - $TIMESTAMP (Total: $FINAL_COUNT capturas)"
          
          git push

      - name: Resumen de ejecucion hibrida
        run: |
          echo "=== RESUMEN HIBRIDO ==="
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Trigger: workflow_dispatch"
          
          if [ "${{ steps.check.outputs.has_changes }}" == "true" ]; then
            echo "Estado: Captura exitosa y cambios commiteados"
            echo "Total de capturas: ${{ steps.check.outputs.file_count }}"
          else
            echo "Estado: Ejecucion completada, sin cambios"
          fi
          
          echo "Contenido actual:"
          ls -la captures/ | tail -3 || echo "Sin archivos"
          
          echo "Tamano total:"
          du -sh captures/ || echo "0B"
          
          echo "Ventajas de la implementacion hibrida:"
          echo "  - Chrome headless como metodo principal (mejor JS)"
          echo "  - wkhtmltoimage como fallback confiable"
          echo "  - Debugging avanzado y analisis automatico"
          echo "  - Optimizado para sitios JavaScript pesados como Windy.com"
