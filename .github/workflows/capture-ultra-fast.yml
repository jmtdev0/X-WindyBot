name: Captura Inteligente con Selenium

on:
  # Ejecucion automatica temporalmente desactivada para testing
  # schedule:
  #   - cron: '*/5 * * * *'
  
  # Permite ejecucion manual desde la interfaz de GitHub
  workflow_dispatch:
    inputs:
      cleanup_old_files:
        description: 'Limpiar archivos antiguos (mantener ultimos 100)'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  capture-radar-selenium:
    name: Captura Inteligente (Selenium + Chrome + Fallbacks)
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    outputs:
      file_count: ${{ steps.check.outputs.file_count }}
      has_changes: ${{ steps.check.outputs.has_changes }}

    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Node.js y dependencias
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar herramientas hibridas (Node.js + Selenium + Chrome)
        run: |
          echo "Actualizando paquetes del sistema..."
          sudo apt-get update -qq
          
          echo "Instalando Google Chrome (para Selenium)..."
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update -qq
          sudo apt-get install -y google-chrome-stable
          
          # Ensure Chromedriver matches installed Chrome version (sync)
          echo "Sincronizando Chromedriver con la version de Chrome instalada..."
          CHROME_VER=$(google-chrome-stable --version | sed -E 's/Google Chrome ([0-9]+)\..*/\1/') || CHROME_VER=119
          echo "Chrome major version detected: $CHROME_VER"
          CHROMEDRIVER_DIR="/usr/local/share/chromedriver_$CHROME_VER"
          mkdir -p "$CHROMEDRIVER_DIR"

          # Try to download the matching chromedriver from official storage
          DRIVER_ZIP="chromedriver_linux64.zip"
          DRIVER_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROME_VER/latest/$DRIVER_ZIP"
          echo "Intentando descargar Chromedriver desde: $DRIVER_URL"
          if curl -sSfL "$DRIVER_URL" -o "/tmp/$DRIVER_ZIP"; then
            unzip -q -o "/tmp/$DRIVER_ZIP" -d "$CHROMEDRIVER_DIR"
            sudo mv -f "$CHROMEDRIVER_DIR/chromedriver" /usr/local/bin/chromedriver
            sudo chmod +x /usr/local/bin/chromedriver
            echo "Chromedriver instalado en /usr/local/bin/chromedriver"
          else
            echo "Fallo al descargar Chromedriver desde storage principal, usando npm chromedriver (si existe)" || true
            # If npm chromedriver is present, link it
            if [ -f "./node_modules/chromedriver/lib/chromedriver/chromedriver" ]; then
              sudo cp ./node_modules/chromedriver/lib/chromedriver/chromedriver /usr/local/bin/chromedriver
              sudo chmod +x /usr/local/bin/chromedriver
              echo "Chromedriver copiado desde node_modules"
            else
              echo "No se encontro chromedriver en node_modules. Selenium puede fallar si no hay driver compatible."
            fi
          fi
          
          echo "Instalando dependencias Node.js para Selenium..."
          npm install
          
          echo "Instalando wkhtmltopdf (fallback de emergencia)..."
          sudo apt-get install -y wkhtmltopdf xvfb curl
          
          echo "Verificando instalaciones..."
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          google-chrome-stable --version || echo "Chrome no disponible"
          wkhtmltoimage --version || echo "wkhtmltoimage no disponible"
          
          echo "Verificando dependencias Node.js..."
          npm list selenium-webdriver chromedriver --depth=0 || echo "Dependencias verificadas"
          
          echo "Configurando display virtual para fallbacks..."
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3
          echo "Entorno híbrido Node.js + Selenium configurado correctamente"

      - name: Verificar directorios y conectividad
        run: |
          echo "Verificando estructura del proyecto..."
          mkdir -p captures
          ls -la captures/ || echo "Carpeta captures vacia"
          
          echo "Verificando conectividad..."
          curl -I https://www.windy.com --max-time 10 || echo "Problema de conectividad"
          
          echo "Espacio disponible:"
          df -h . | head -2

      - name: Ejecutar captura inteligente con Selenium
        timeout-minutes: 3
        run: |
          echo "🚀 Iniciando captura inteligente con Selenium WebDriver..."
          echo "🎯 Método principal: Node.js + Selenium (Esperas inteligentes)"
          echo "🔄 Fallback 1: Script bash híbrido"
          echo "🔄 Fallback 2: Chrome headless directo"
          echo "=" | tr '\n' '=' | head -c 60; echo
          
          # MÉTODO 1: Selenium WebDriver (PRINCIPAL)
          echo "🎯 Intentando captura con Selenium WebDriver..."
          if npm run capture; then
            echo "✅ Captura Selenium exitosa!"
            
          # MÉTODO 2: Script bash híbrido (FALLBACK 1)  
          elif [ -f "scripts/capture-native.sh" ]; then
            echo "⚠️ Selenium falló, probando script bash híbrido..."
            chmod +x scripts/capture-native.sh
            export DISPLAY=:99
            timeout 90s ./scripts/capture-native.sh || {
              echo "❌ Script híbrido también falló"
              
              # MÉTODO 3: Chrome directo (FALLBACK 2)
              echo "⚠️ Usando Chrome headless directo como último recurso..."
              
              TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
              FILENAME="radar_${TIMESTAMP}.png"
              FILEPATH="captures/${FILENAME}"
              
              timeout 45s google-chrome-stable \
                --headless=new \
                --no-sandbox \
                --disable-gpu \
                --disable-dev-shm-usage \
                --disable-extensions \
                --window-size=1920,1080 \
                --virtual-time-budget=8000 \
                --screenshot="$FILEPATH" \
                "https://www.windy.com/?radar,39.853,-3.807,7" || {
                
                echo "❌ TODOS LOS MÉTODOS FALLARON"
                echo "Creando captura de emergencia con información..."
                
                mkdir -p captures
                TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
                EMERGENCY_FILE="captures/emergency_${TIMESTAMP}.txt"
                
                echo "CAPTURA DE EMERGENCIA - $TIMESTAMP" > "$EMERGENCY_FILE"
                echo "URL: https://www.windy.com/?radar,39.853,-3.807,7" >> "$EMERGENCY_FILE"
                echo "Todos los métodos de captura fallaron" >> "$EMERGENCY_FILE"
                curl -I https://www.windy.com --max-time 10 >> "$EMERGENCY_FILE" 2>&1
                
                echo "Archivo de emergencia creado: $EMERGENCY_FILE"
              }
            }
            
          # MÉTODO 3: Chrome directo (si no hay script bash)
          else
            echo "⚠️ Selenium falló y no hay script bash, usando Chrome directo..."
            
            TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
            FILENAME="radar_${TIMESTAMP}.png"
            FILEPATH="captures/${FILENAME}"
            
            timeout 45s google-chrome-stable \
              --headless=new \
              --no-sandbox \
              --disable-gpu \
              --disable-dev-shm-usage \
              --window-size=1920,1080 \
              --virtual-time-budget=10000 \
              --screenshot="$FILEPATH" \
              "https://www.windy.com/?radar,39.853,-3.807,7" && {
              echo "✅ Captura Chrome directa exitosa: $FILENAME"
            } || {
              echo "❌ Chrome directo también falló"
            }
          fi
          
          echo "Resultados:"
          ls -la captures/*.png 2>/dev/null || echo "No hay capturas PNG"
          
          echo "Analisis de logs de debugging:"
          if [ -f "chrome_debug.log" ]; then
            echo "Chrome debug log (ultimas 10 lineas):"
            tail -10 chrome_debug.log
          fi
          
          if [ -f "wkhtmltoimage_debug.log" ]; then
            echo "wkhtmltoimage debug log (ultimas 10 lineas):"
            tail -10 wkhtmltoimage_debug.log
          fi

      - name: Verificar estado del repositorio
        id: check
        run: |
          echo "Verificando estado del repositorio..."
          
          FILE_COUNT=$(find captures -name "*.png" 2>/dev/null | wc -l)
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          echo "Total de capturas: $FILE_COUNT"
          
          if git diff --quiet && git diff --staged --quiet; then
            echo "No hay cambios para commitear"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Se detectaron cambios"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            echo "Estado de Git:"
            git status --porcelain
          fi

      - name: Limpieza automatica de archivos antiguos
        if: steps.check.outputs.has_changes == 'true'
        run: |
          cd captures
          FILE_COUNT=$(find . -name "radar_*.png" | wc -l)
          
          if [ "$FILE_COUNT" -gt 100 ]; then
            echo "Eliminando archivos antiguos (manteniendo ultimos 100)..."
            find . -name "radar_*.png" -printf '%T@ %p\n' | sort -n | head -n -100 | cut -d' ' -f2- | xargs rm -f
            NEW_COUNT=$(find . -name "radar_*.png" | wc -l)
            echo "Limpieza completada. Archivos restantes: $NEW_COUNT"
          else
            echo "No necesita limpieza (solo $FILE_COUNT archivos)"
          fi

      - name: Configurar Git y hacer commit
        if: steps.check.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Ultra Fast Hybrid"
          
          git add captures/
          
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          FINAL_COUNT=$(find captures -name "radar_*.png" | wc -l)
          git commit -m "Captura hibrida del radar - $TIMESTAMP (Total: $FINAL_COUNT capturas)"
          
          git push

      - name: Resumen de ejecucion inteligente
        run: |
          echo "=== RESUMEN INTELIGENTE CON SELENIUM ==="
          echo "🕐 Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "🎯 Trigger: workflow_dispatch"
          echo "🚀 Arquitectura: Node.js + Selenium WebDriver"
          
          if [ "${{ steps.check.outputs.has_changes }}" == "true" ]; then
            echo "✅ Estado: Captura exitosa y cambios commiteados"
            echo "📊 Total de capturas: ${{ steps.check.outputs.file_count }}"
          else
            echo "ℹ️ Estado: Ejecucion completada, sin cambios"
          fi
          
          echo ""
          echo "📁 Contenido actual:"
          ls -la captures/ | tail -3 || echo "Sin archivos"
          
          echo ""
          echo "📊 Tamaño total:"
          du -sh captures/ || echo "0B"
          
          echo ""
          echo "🎉 VENTAJAS DE LA IMPLEMENTACIÓN CON SELENIUM:"
          echo "  ✅ Selenium WebDriver como método principal (esperas inteligentes)"
          echo "  ✅ Detección automática de elementos cargados"
          echo "  ✅ Manejo avanzado de JavaScript asíncrono"
          echo "  ✅ Optimización específica para Windy.com"
          echo "  ✅ Triple fallback: Selenium → Bash → Chrome directo"
          echo "  ✅ Validación automática de capturas"
          echo "  ✅ Debugging avanzado y logs detallados"
          echo "  ✅ Timeout inteligente por método"
