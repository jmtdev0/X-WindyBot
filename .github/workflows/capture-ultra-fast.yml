name: Captura Radar con Playwright (Optimizado)

on:
  # Ejecución automática cada 30 minutos (ACTIVADO)
  schedule:
    - cron: '*/30 * * * *'  # Cada 30 minutos
  
  # Permite ejecución manual desde la interfaz de GitHub
  workflow_dispatch:
    inputs:
      cleanup_old_files:
        description: 'Limpiar archivos antiguos (mantener ultimos 100)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  capture-radar-playwright:
    name: Captura Radar (Playwright + WebGL)
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Aumentado a 5 min para install-deps (no cacheable)
    
    outputs:
      file_count: ${{ steps.check.outputs.file_count }}
      has_changes: ${{ steps.check.outputs.has_changes }}

    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache de node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Instalar dependencias Node.js
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Cache de Playwright browsers
        uses: actions/cache@v4
        id: cache-playwright
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Instalar Playwright Chromium
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      - name: Instalar solo dependencias del sistema (si Playwright está en cache)
        if: steps.cache-playwright.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium

      - name: Crear directorio de capturas
        run: mkdir -p captures

      - name: Ejecutar captura con Playwright
        timeout-minutes: 2  # Aumentado a 2 min (espera inteligente es más rápida)
        env:
          RADAR_LAT: ${{ vars.RADAR_LAT }}
          RADAR_LON: ${{ vars.RADAR_LON }}
          RADAR_ZOOM: ${{ vars.RADAR_ZOOM }}
          NODE_ENV: production
        run: |
          echo "🚀 Iniciando captura con Playwright (optimizado con cache)..."
          echo "🎯 Método: Chromium + Xvfb + preserveDrawingBuffer + canvas.toDataURL()"
          
          # Usar valores por defecto si las variables no están definidas
          RADAR_LAT=${RADAR_LAT:-39.259}
          RADAR_LON=${RADAR_LON:--4.684}
          RADAR_ZOOM=${RADAR_ZOOM:-5}
          
          echo "📍 Coordenadas: Lat $RADAR_LAT, Lon $RADAR_LON, Zoom $RADAR_ZOOM"
          
          # Exportar para que el script Node.js las lea
          export RADAR_LAT RADAR_LON RADAR_ZOOM
          
          # Usar Xvfb para display virtual con mejor soporte OpenGL (colores correctos del radar)
          xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" npm run capture
          
          echo ""
          echo "Resultados:"
          ls -lh captures/*.png 2>/dev/null || echo "⚠️ No se encontraron capturas PNG"

      - name: Verificar capturas generadas
        id: check
        run: |
          echo "Verificando capturas generadas..."
          
          FILE_COUNT=$(find captures -name "radar_*.png" 2>/dev/null | wc -l)
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          echo "📊 Total de capturas en el repositorio: $FILE_COUNT"
          
          # Verificar si hay una captura nueva
          LATEST_CAPTURE=$(ls -t captures/radar_*.png 2>/dev/null | head -1)
          if [ -n "$LATEST_CAPTURE" ]; then
            CAPTURE_SIZE=$(stat -f%z "$LATEST_CAPTURE" 2>/dev/null || stat -c%s "$LATEST_CAPTURE" 2>/dev/null || echo "0")
            CAPTURE_SIZE_KB=$((CAPTURE_SIZE / 1024))
            echo "capture_valid=true" >> $GITHUB_OUTPUT
            echo "✅ Última captura: $(basename "$LATEST_CAPTURE") (${CAPTURE_SIZE_KB} KB)"
          else
            echo "capture_valid=false" >> $GITHUB_OUTPUT
            echo "⚠️ No se encontró captura reciente"
          fi
          
          echo ""
          echo "📁 Capturas recientes:"
          ls -lht captures/*.png 2>/dev/null | head -5 || echo "Sin archivos"

      - name: Publicar en Twitter/X
        if: steps.check.outputs.capture_valid == 'true'
        env:
          TWITTER_API_KEY: sZ3YRMc9lxImNSpOndLfc29ah
          TWITTER_API_SECRET: GJbvC5h5A16c5jjGvMaFxbyuKCbyWAWf5ukdU8V4lmyIck5jGF
          TWITTER_ACCESS_TOKEN: 1975621527157559296-GSTDICJEu0o4skmYPSfoxX142WHmgF
          TWITTER_ACCESS_SECRET: ajcxJuBjopI6z0U623Qi8Zi8NvByK53D2r4tQIQBUyKC8
          RADAR_LAT: ${{ vars.RADAR_LAT }}
          RADAR_LON: ${{ vars.RADAR_LON }}
          RADAR_ZOOM: ${{ vars.RADAR_ZOOM }}
          TWITTER_INCLUDE_LINK: ${{ vars.TWITTER_INCLUDE_LINK || 'true' }}
          TWITTER_CUSTOM_MESSAGE: ${{ vars.TWITTER_CUSTOM_MESSAGE }}
        run: |
          # Usar valores por defecto si no están definidas
          export RADAR_LAT=${RADAR_LAT:-39.259}
          export RADAR_LON=${RADAR_LON:--4.684}
          export RADAR_ZOOM=${RADAR_ZOOM:-5}
          
          echo "🐦 Publicando captura en Twitter/X..."
          
          # Solo publicar si las credenciales están configuradas
          if [ -z "$TWITTER_API_KEY" ]; then
            echo "⏭️ Credenciales de Twitter no configuradas, saltando publicación"
            echo "ℹ️ Para habilitar, configura los secrets: TWITTER_API_KEY, TWITTER_API_SECRET, TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_SECRET"
          else
            npm run publish:twitter
          fi

      - name: Limpieza automatica de archivos antiguos
        run: |
          cd captures
          FILE_COUNT=$(find . -name "radar_*.png" 2>/dev/null | wc -l)
          
          if [ "$FILE_COUNT" -gt 100 ]; then
            echo "🗑️ Eliminando archivos antiguos (manteniendo ultimos 100)..."
            find . -name "radar_*.png" -printf '%T@ %p\n' | sort -n | head -n -100 | cut -d' ' -f2- | xargs rm -f
            NEW_COUNT=$(find . -name "radar_*.png" | wc -l)
            echo "✅ Limpieza completada. Archivos restantes: $NEW_COUNT"
          else
            echo "✅ No necesita limpieza (solo $FILE_COUNT archivos)"
          fi

      - name: Commit y push de capturas
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Optimizado"
          
          # Añadir solo las capturas nuevas (más rápido)
          git add captures/*.png
          
          # Verificar si hay cambios
          if git diff --staged --quiet; then
            echo "ℹ️ No hay cambios para commitear"
          else
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
            FINAL_COUNT=$(find captures -name "radar_*.png" | wc -l)
            
            # Commit sin verificación detallada (más rápido)
            git commit -m "📸 Radar $TIMESTAMP (${FINAL_COUNT} capturas)" --no-verify
            git push --quiet
            
            echo "✅ Cambios commiteados y pusheados exitosamente"
          fi

      - name: Resumen de ejecución
        if: always()
        run: |
          echo "✅ Captura completada - $(date -u +"%H:%M UTC")"
          echo " Total capturas: ${{ steps.check.outputs.file_count }}"
          ls -lht captures/radar_*.png 2>/dev/null | head -1 || echo "Sin archivos"


