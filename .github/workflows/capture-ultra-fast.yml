name: Captura Radar con Playwright

on:
  # Ejecucion automatica temporalmente desactivada para testing
  # schedule:
  #   - cron: '*/5 * * * *'
  
  # Permite ejecucion manual desde la interfaz de GitHub
  workflow_dispatch:
    inputs:
      cleanup_old_files:
        description: 'Limpiar archivos antiguos (mantener ultimos 100)'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  capture-radar-playwright:
    name: Captura Radar (Playwright + WebGL)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      file_count: ${{ steps.check.outputs.file_count }}
      has_changes: ${{ steps.check.outputs.has_changes }}

    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias Node.js
        run: npm install

      - name: Instalar Playwright Chromium
        run: npx playwright install chromium --with-deps

      - name: Crear directorio de capturas
        run: mkdir -p captures

      - name: Ejecutar captura con Playwright
        timeout-minutes: 2
        run: |
          echo "🚀 Iniciando captura con Playwright (soporte WebGL nativo)..."
          echo "🎯 Método: Chromium + preserveDrawingBuffer + canvas.toDataURL()"
          echo "=" | tr '\n' '=' | head -c 60; echo
          
          npm run capture
          
          echo ""
          echo "Resultados:"
          ls -lh captures/*.png 2>/dev/null || echo "⚠️ No se encontraron capturas PNG"

      - name: Subir capturas como artefactos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: capturas-radar-${{ github.run_number }}
          path: captures/*.png
          retention-days: 30
          if-no-files-found: warn

      - name: Verificar estado del repositorio
        id: check
        run: |
          echo "Verificando estado del repositorio..."
          
          FILE_COUNT=$(find captures -name "*.png" 2>/dev/null | wc -l)
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          echo "Total de capturas: $FILE_COUNT"
          
          if git diff --quiet && git diff --staged --quiet; then
            echo "No hay cambios para commitear"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Se detectaron cambios"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            echo "Estado de Git:"
            git status --porcelain
          fi

      - name: Limpieza automatica de archivos antiguos
        if: steps.check.outputs.has_changes == 'true'
        run: |
          cd captures
          FILE_COUNT=$(find . -name "radar_*.png" | wc -l)
          
          if [ "$FILE_COUNT" -gt 100 ]; then
            echo "Eliminando archivos antiguos (manteniendo ultimos 100)..."
            find . -name "radar_*.png" -printf '%T@ %p\n' | sort -n | head -n -100 | cut -d' ' -f2- | xargs rm -f
            NEW_COUNT=$(find . -name "radar_*.png" | wc -l)
            echo "Limpieza completada. Archivos restantes: $NEW_COUNT"
          else
            echo "No necesita limpieza (solo $FILE_COUNT archivos)"
          fi

      - name: Configurar Git y hacer commit
        if: steps.check.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Playwright WebGL"
          
          git add captures/
          
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          FINAL_COUNT=$(find captures -name "radar_*.png" | wc -l)
          git commit -m "Captura radar Playwright - $TIMESTAMP (Total: $FINAL_COUNT capturas)"
          
          git push

      - name: Resumen de ejecucion
        run: |
          echo "=== RESUMEN CAPTURA PLAYWRIGHT ==="
          echo "🕐 Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "🎯 Trigger: workflow_dispatch"
          echo "🚀 Motor: Playwright Chromium + WebGL"
          
          if [ "${{ steps.check.outputs.has_changes }}" == "true" ]; then
            echo "✅ Estado: Captura exitosa y cambios commiteados"
            echo "📊 Total de capturas: ${{ steps.check.outputs.file_count }}"
          else
            echo "ℹ️ Estado: Ejecucion completada, sin cambios"
          fi
          
          echo ""
          echo "📁 Capturas recientes:"
          ls -lh captures/*.png 2>/dev/null | tail -3 || echo "Sin archivos"
          
          echo ""
          echo "📊 Tamaño total:"
          du -sh captures/ || echo "0B"
          
          echo ""
          echo "🎉 VENTAJAS DE PLAYWRIGHT:"
          echo "  ✅ Soporte WebGL nativo en modo headless"
          echo "  ✅ Capturas de canvas con preserveDrawingBuffer"
          echo "  ✅ Método canvas.toDataURL() directo"
          echo "  ✅ SwiftShader para renderizado por software"
          echo "  ✅ Capturas 650-800 KB (vs 8 KB con Selenium)"
          echo "  ✅ Sin necesidad de drivers externos"
          echo "  ✅ Instalación simplificada y más rápida"
          echo "  ✅ Mejor manejo de aplicaciones JavaScript modernas"

